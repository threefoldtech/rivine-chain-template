package main

import (
	{{if .Blockchain.Transactions.Minting}}"github.com/threefoldtech/rivine/types"
	{{.Blockchain.Name}}types "{{.Blockchain.Repository}}/pkg/types"
	"github.com/threefoldtech/rivine/extensions/minting"
	mintingcli "github.com/threefoldtech/rivine/extensions/minting/client"{{end}}
	{{if .Blockchain.Transactions.Authcoin}}{{if not .Blockchain.Transactions.Minting}}"github.com/threefoldtech/rivine/types"
	{{.Blockchain.Name}}types "{{.Blockchain.Repository}}/pkg/types"
	{{end}}"github.com/threefoldtech/rivine/extensions/authcointx"
	authcointxcli "github.com/threefoldtech/rivine/extensions/authcointx/client"{{end}}

	"github.com/threefoldtech/rivine/pkg/client"
)
{{ range $key, $network := .Blockchain.Networks }}
func Register{{ title $key }}Transactions(bc client.BaseClient) {
	registerTransactions(bc)
}
{{ end }}

func registerTransactions(bc client.BaseClient) {
	{{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.ConditionUpdate}}// create minting plugin client...
	mintingCLI := mintingcli.NewPluginConsensusClient(bc)
	// ...and register minting types
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionMinterDefinition, minting.MinterDefinitionTransactionController{
		MintConditionGetter: mintingCLI,
		TransactionVersion:  {{.Blockchain.Name}}types.TransactionVersionMinterDefinition,
	}){{end}}{{end}}{{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.CoinCreation}}
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionCoinCreation, minting.CoinCreationTransactionController{
		MintConditionGetter: mintingCLI,
		TransactionVersion:  {{.Blockchain.Name}}types.TransactionVersionCoinCreation,
	}){{end}}{{end}}{{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.CoinDestruction}}
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionCoinDestruction, minting.CoinDestructionTransactionController{
		TransactionVersion: {{.Blockchain.Name}}types.TransactionVersionCoinDestruction,
	}){{end}}{{end}}

	{{if .Blockchain.Transactions.Authcoin}}// create coin auth tx plugin client...
	authCoinTxCLI := authcointxcli.NewPluginConsensusClient(bc)
	// ...and register coin auth tx types
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionAuthConditionUpdate, authcointx.AuthConditionUpdateTransactionController{
		AuthInfoGetter:     authCoinTxCLI,
		TransactionVersion: {{.Blockchain.Name}}types.TransactionVersionAuthConditionUpdate,
	})
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionAuthAddressUpdate, authcointx.AuthAddressUpdateTransactionController{
		AuthInfoGetter:     authCoinTxCLI,
		TransactionVersion: {{.Blockchain.Name}}types.TransactionVersionAuthAddressUpdate,
	}){{end}}
}
