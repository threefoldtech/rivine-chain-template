package main

import (
	{{if .Blockchain.Transactions.Minting}}"github.com/threefoldtech/rivine/extensions/minting"
  mintingcli "github.com/threefoldtech/rivine/extensions/minting/client"{{end}}
  {{if .Blockchain.Transactions.Authcoin}}"github.com/threefoldtech/rivine/extensions/authcointx"
	authcointxcli "github.com/threefoldtech/rivine/extensions/authcointx/client"{{end}}

	"github.com/threefoldtech/rivine/pkg/client"
	"github.com/threefoldtech/rivine/types"

  {{.Blockchain.Name}}types "github.com/{{.Blockchain.Owner}}/{{.Blockchain.Name}}/pkg/types"
)

// RegisterStandardTransactions registers the {{.Blockchain.Name}}-specific transactions as required for the standard network.
func RegisterStandardTransactions(cli *client.CommandLineClient) {
	registerTransactions(cli)
}

// RegisterTestnetTransactions registers the {{.Blockchain.Name}}-specific transactions as required for the test network.
func RegisterTestnetTransactions(cli *client.CommandLineClient) {
	registerTransactions(cli)
}

// RegisterDevnetTransactions registers the {{.Blockchain.Name}}-specific transactions as required for the dev network.
func RegisterDevnetTransactions(cli *client.CommandLineClient) {
	registerTransactions(cli)
}

func registerTransactions(cli *client.CommandLineClient) {
  {{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.ConditionUpdate}}// create minting plugin client...
  mintingCLI := mintingcli.NewPluginConsensusClient(cli)
  // ...and register minting types
  types.RegisterTransactionVersion({{.Blockchain.Name}}types.MinterDefinitionTxVersion, minting.MinterDefinitionTransactionController{
    MintConditionGetter: mintingCLI,
    TransactionVersion:  {{.Blockchain.Name}}types.MinterDefinitionTxVersion,
  }){{end}}{{end}}{{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.CoinCreation}}
  types.RegisterTransactionVersion({{.Blockchain.Name}}types.CoinCreationTxVersion, minting.CoinCreationTransactionController{
    MintConditionGetter: mintingCLI,
    TransactionVersion:  {{.Blockchain.Name}}types.CoinCreationTxVersion,
  }){{end}}{{end}}{{if .Blockchain.Transactions.Minting}}{{if .Blockchain.Transactions.Minting.CoinDestruction}}
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.CoinDestructionTxVersion, minting.CoinDestructionTransactionController{
		TransactionVersion: {{.Blockchain.Name}}types.CoinDestructionTxVersion,
	}){{end}}{{end}}

  {{if .Blockchain.Transactions.Authcoin}}// create coin auth tx plugin client...
	authCoinTxCLI := authcointxcli.NewPluginConsensusClient(cli)
	// ...and register coin auth tx types
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionAuthConditionUpdateTx, authcointx.AuthConditionUpdateTransactionController{
		AuthInfoGetter:     authCoinTxCLI,
		TransactionVersion: {{.Blockchain.Name}}types.TransactionVersionAuthConditionUpdateTx,
	})
	types.RegisterTransactionVersion({{.Blockchain.Name}}types.TransactionVersionAuthAddressUpdateTx, authcointx.AuthAddressUpdateTransactionController{
		AuthInfoGetter:     authCoinTxCLI,
		TransactionVersion: {{.Blockchain.Name}}types.TransactionVersionAuthAddressUpdateTx,
	}){{end}}
}
