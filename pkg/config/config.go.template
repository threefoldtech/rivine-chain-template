package config

import (
	"fmt"
	"math/big"

	"github.com/threefoldtech/rivine/build"
	"github.com/threefoldtech/rivine/modules"
	"github.com/threefoldtech/rivine/types"
)

var (
	rawVersion = "v0.1"
	// Version of the chain binaries.
	//
	// Value is defined by a private build flag,
	// or hardcoded to the latest released tag as fallback.
	Version build.ProtocolVersion
)

const (
	// TokenUnit defines the unit of one Token.
	TokenUnit = "{{.Blockchain.Currency.Unit}}"
	// TokenChainName defines the name of the chain.
	TokenChainName = "{{.Blockchain.Name}}"
)

// chain network names
const (
	{{ range $key, $value := .Blockchain.Network }}
	Network{{ title $key }} = "{{ lower $key }}"
	{{end}}
)

// GetBlockchainInfo returns the naming and versioning of tfchain.
func GetBlockchainInfo() types.BlockchainInfo {
	return types.BlockchainInfo{
		Name:            TokenChainName,
		NetworkName:     NetworkNameTest,
		CoinUnit:        TokenUnit,
		ChainVersion:    Version,       // use our own blockChain/build version
		ProtocolVersion: build.Version, // use latest available rivine protocol version
	}
}

{{ with $defaultnetwork := "" }}
{{ with $defaultnetworktype := -1 }}
{{ range $key, $network := .Blockchain.Network }}

{{ if gt $network.NetworkType $defaultnetworktype }}
$defaultnetworktype = $network.NetworkType
$defaultnetwork = $key
{{ end }}

func Get{{ title $key }}Genesis() types.ChainConstants {
	{{if eq $network.NetworkType 1}}
	cfg := types.StandardnetChainConstants()
	{{else if eq $network.NetworkType 2}}
	cfg := types.TestnetChainConstants()
	{{else}}
	cfg := types.DevnetChainConstants()
	{{end}}

	// set transaction versions
	{{if .Blockchain.transactions.default.version}}
	cfg.DefaultTransactionVersion = types.TransactionVersion({{.Blockchain.transactions.default.version}})
	cfg.GenesisTransactionVersion = types.TransactionVersion({{.Blockchain.transactions.default.version}})
	{{else}}
	cfg.DefaultTransactionVersion = types.TransactionVersionOne
	cfg.GenesisTransactionVersion = types.TransactionVersionOne
	{{end}}

	// block time
	cfg.BlockFrequency = {{$network.BlockFrequency}}

	// Time to MaturityDelay
	cfg.MaturityDelay = {{$network.MaturityDelay}}

	// The genesis timestamp
	cfg.GenesisTimestamp = types.Timestamp({{$network.Genesis.GenesisBlockTimestamp}})

	// block window for difficulty
	cfg.TargetWindow = {{$network.TargetWindow}}

	cfg.MaxAdjustmentUp = big.NewRat({{$network.MaxAdjustmentUp.Denominator}}, {{$network.MaxAdjustmentUp.Numerator}})
	cfg.MaxAdjustmentDown = big.NewRat({{$network.MaxAdjustmentDown.Denominator}}, {{$network.MaxAdjustmentDown.Numerator}})

	cfg.FutureThreshold = {{$network.FutureThreshold}}
	cfg.ExtremeFutureThreshold = {{$network.ExtremeFutureThreshold}}

	cfg.StakeModifierDelay = {{$network.StakeModifierDelay}}

	// Time it takes before transferred blockstakes can be used
	cfg.BlockStakeAging = {{$network.BlockStakeAging}}

	// Coins you receive when you create a block
	cfg.BlockCreatorFee = cfg.CurrencyUnits.OneCoin.Mul64({{$network.BlockCreatorFee}})

	// Minimum transaction fee
	cfg.MinimumTransactionFee = cfg.CurrencyUnits.OneCoin.Mul64({{$network.MinimumTransactionFee}})

	{{if $network.TransactionFeePool}}
	cfg.TransactionFeeCondition = types.NewCondition(types.NewUnlockHashCondition(unlockHashFromHex("{{ $network.TransactionFeePool }}")))
	{{end}}

	// no initial coins, except  1 for initial transaction fee payments
	cfg.GenesisCoinDistribution = []types.CoinOutput{
	{{ range $network.Genesis.CoinOutputs }}{
			Value: cfg.CurrencyUnits.OneCoin.Mul64({{ .Value }}),
			Condition: types.NewCondition(types.NewUnlockHashCondition(unlockHashFromHex("{{.Condition | formatConditionAsString -}}"))),
		},
	{{ end }}
	}

	// allocate block stakes
	cfg.GenesisBlockStakeAllocation = []types.BlockStakeOutput{
		{{ range $network.Genesis.BlockStakeOutputs }}{
		Value:     types.NewCurrency64({{.Value}}),
		Condition: types.NewCondition(types.NewUnlockHashCondition(unlockHashFromHex("{{.Condition | formatConditionAsString -}}"))),
		},
	{{ end }}
}

	return cfg
}

func Get{{ title $key }}BootstrapPeers() []modules.NetAddress {
	return []modules.NetAddress{
		{{range $network.BootstrapPeers}}"{{.Address}}",
	{{end}}
	}
}

{{if .Genesis.Authcoin}}func Get{{ title $key }}GenesisAuthCoinCondition() types.UnlockConditionProxy {
	// TODO: adapt to real condition, also being multi-sig
	return types.NewCondition(types.NewUnlockHashCondition(unlockHashFromHex("{{$network.Genesis.Authcoin | formatConditionAsString -}}")))
}{{end}}

{{end}}

{{ if $defaultnetwork }}
func GetDefaultGenesis() types.ChainConstants {
	return Get{{ title $defaultnetwork }}Genesis()
}
{{end}}
{{end}}
{{end}}

func unlockHashFromHex(hstr string) (uh types.UnlockHash) {
	err := uh.LoadString(hstr)
	if err != nil {
		panic(fmt.Sprintf("func unlockHashFromHex(%s) failed: %v", hstr, err))
	}
	return
}

func init() {
	Version = build.MustParse(rawVersion)
}
