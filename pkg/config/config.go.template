package config

import (
	"math/big"

	"github.com/threefoldtech/rivine/build"
	"github.com/threefoldtech/rivine/types"
	"github.com/threefoldtech/rivine/modules"
)

var (
	rawVersion = "v0.1"
	// Version of the chain binaries.
	//
	// Value is defined by a private build flag,
	// or hardcoded to the latest released tag as fallback.
	Version build.ProtocolVersion
)

const (
	// TokenUnit defines the unit of one Token.
	TokenUnit = "{{.Blockchain.Currency.Unit}}"
	// TokenChainName defines the name of the chain.
	TokenChainName = "{{.Blockchain.Name}}"
)

// chain network names
const (
	{{ range $key, $value := .Blockchain.Networks }}
	NetworkName{{ title $key }} = "{{ lower $key }}"
	{{end}}
)
{{ with $blockchain := .Blockchain }}{{ with $defaultnetwork := "undefined" }}{{ with $defaultnetworktype := 42 }}{{ range $key, $network := $blockchain.Networks }}{{ if lt $network.NetworkType $defaultnetworktype }}{{ $defaultnetworktype = $network.NetworkType }}{{ $defaultnetwork = $key }}{{ end }}{{ end }}
func GetDefaultGenesis() types.ChainConstants {
	return Get{{ title $defaultnetwork }}Genesis()
}

// GetBlockchainInfo returns the naming and versioning of tfchain.
func GetBlockchainInfo() types.BlockchainInfo {
	return types.BlockchainInfo{
		Name:            TokenChainName,
		NetworkName:     NetworkName{{ title $defaultnetwork }},
		CoinUnit:        TokenUnit,
		ChainVersion:    Version,       // use our own blockChain/build version
		ProtocolVersion: build.Version, // use latest available rivine protocol version
	}
}{{ end }}{{ end }}{{ end }}
{{ with $blockchain := .Blockchain }}{{ range $key, $network := $blockchain.Networks }}
func Get{{ title $key }}Genesis() types.ChainConstants {
	cfg := types.{{if eq $network.NetworkType 1}}Standardnet{{else if eq $network.NetworkType 2}}Testnet{{else}}Devnet{{end}}ChainConstants()

	// set transaction versions
	cfg.DefaultTransactionVersion = types.TransactionVersion({{$blockchain.Transactions.Default.Version}})
	cfg.GenesisTransactionVersion = types.TransactionVersion({{$blockchain.Transactions.Default.Version}})

	// size limits
	cfg.BlockSizeLimit = {{ $network.BlockSizeLimit }}
	cfg.ArbitraryDataSizeLimit = {{ $network.ArbitraryDataSizeLimit }}

	// block time
	cfg.BlockFrequency = {{$network.BlockFrequency}}

	// Time to MaturityDelay
	cfg.MaturityDelay = {{$network.MaturityDelay}}

	// The genesis timestamp
	cfg.GenesisTimestamp = types.Timestamp({{$network.Genesis.GenesisBlockTimestamp}})

	cfg.MedianTimestampWindow = {{$network.MedianTimestampWindow}}

	// block window for difficulty
	cfg.TargetWindow = {{$network.TargetWindow}}

	cfg.MaxAdjustmentUp = big.NewRat({{$network.MaxAdjustmentUp.Denominator}}, {{$network.MaxAdjustmentUp.Numerator}})
	cfg.MaxAdjustmentDown = big.NewRat({{$network.MaxAdjustmentDown.Denominator}}, {{$network.MaxAdjustmentDown.Numerator}})

	cfg.FutureThreshold = {{$network.FutureThreshold}}
	cfg.ExtremeFutureThreshold = {{$network.ExtremeFutureThreshold}}

	cfg.StakeModifierDelay = {{$network.StakeModifierDelay}}

	// Time it takes before transferred blockstakes can be used
	cfg.BlockStakeAging = {{$network.BlockStakeAging}}

	// Coins you receive when you create a block
	cfg.BlockCreatorFee = cfg.CurrencyUnits.OneCoin{{$network.BlockCreatorFee | formatValueStringAsOneCoinCurrencyMultiplier -}}

	// Minimum transaction fee
	cfg.MinimumTransactionFee = cfg.CurrencyUnits.OneCoin{{$network.MinimumTransactionFee | formatValueStringAsOneCoinCurrencyMultiplier -}}

	{{if $network.TransactionFeePool}}
	cfg.TransactionFeeCondition = types.NewCondition(types.NewUnlockHashCondition(unlockHashFromHex("{{ $network.TransactionFeePool }}")))
	{{end}}{{ if $network.TransactionPool }}

	// Set Transaction Pool config
	cfg.TransactionPool = types.TransactionPoolConstants{
		TransactionSizeLimit:    {{ $network.TransactionPool.TransactionSizeLimit }},
		TransactionSetSizeLimit: {{ $network.TransactionPool.TransactionSetSizeLimit }},
		PoolSizeLimit:           {{ $network.TransactionPool.PoolSizeLimit }},
	}
{{ end }}
	// allocate initial coin outputs
	cfg.GenesisCoinDistribution = []types.CoinOutput{ {{ range $network.Genesis.CoinOutputs }}
		{
			Value: cfg.CurrencyUnits.OneCoin{{ .Value | formatValueStringAsOneCoinCurrencyMultiplier -}},
			Condition: {{.Condition | formatConditionAsGoString -}},
		},{{ end }}
	}

	// allocate initial block stake outputs
	cfg.GenesisBlockStakeAllocation = []types.BlockStakeOutput{ {{ range $network.Genesis.BlockStakeOutputs }}
		{
		Value:     types.NewCurrency64({{.Value}}),
		Condition: {{.Condition | formatConditionAsGoString -}},
		},{{ end }}
	}

	return cfg
}

func Get{{ title $key }}BootstrapPeers() []modules.NetAddress {
	return []modules.NetAddress{ {{range $network.BootstrapPeers}}
		"{{.NetAddress}}",{{end}}
	}
}

{{if $network.Genesis.Minting }}func Get{{ title $key }}GenesisMintCondition() types.UnlockConditionProxy {
	return {{$network.Genesis.Minting | formatConditionAsGoString -}}
}{{end}}

{{if .Genesis.Authcoin}}func Get{{ title $key }}GenesisAuthCoinCondition() types.UnlockConditionProxy {
	return {{$network.Genesis.Authcoin | formatConditionAsGoString -}}
}{{end}}
{{end}}{{end}}

func init() {
	Version = build.MustParse(rawVersion)
}
